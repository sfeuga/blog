---
layout: post

title: "Création de Clefs SSH pour une connexion sans mots de passe - UPDATE"
categories:
  - Computer science

tag:
  - Operating system

published: false
---
Autrefois tout le monde employait l'authentification typique par le principe _identifiant - mot de passe_. Cependant si quelqu'un connait votre mot de passe, la sécurité est compromise.



Pour être débarrassé du problème, <abbr title="Secure Shell">SSH</abbr> offre l'__Authentification par clé publique/privée__ au lieu des mots de passe « simples ». De cette manière, il faut être en possession de non plus d'une mais de deux informations pour se connecter (avoir la clé privée et connaître le mot de passe de cette clé).



Ceci peut permettre par exemple :
* à un administrateur de se connecter à des centaines de machines sans devoir connaître des centaines de mots de passe différents;
* de ne pas avoir un mot de passe à saisir toutes les 2 minutes (en utilisant _ssh-agent_).

À moins que vous n'ayez déjà un couple de clés, vous devez d'abord en créer.
Exemple pour une clé utilisant le protocole de chiffrage RSA, vous saisirez dans le [terminal](http://doc.ubuntu-fr.org/terminal) du client :

`$ssh-keygen -t rsa`


Il vous sera alors demandé où sauver la clé privée (acceptez juste l'endroit par défaut : __~/.ssh__, et ne changez pas le nom du fichier généré) puis de choisir une _passphrase_ (phrase de reconnaissance).

<blockquote>
Bien que non obligatoire, l'utilisation d'une _passphrase_ est recommandée pour protéger votre clé privée. En effet toute personne qui obtiendrait l'accès à votre clé privée (non protégée) aurait alors vos permissions sur d'autres ordinateurs. Veuillez prendre un instant et choisissez une très bonne _passphrase_ c'est à dire longue et complexe.</blockquote>



Votre clef publique a été créée avec la nouvelle clé privée. Elles sont habituellement localisées dans les [fichiers cachés](http://doc.ubuntu-fr.org/fichier_cache) `~/.ssh/id_rsa.pub` pour la clé publique et `~/.ssh/id_rsa` pour la clé privée.



Il faut maintenant envoyer au serveur votre clé publique (fichier id_rsa.pub par mail) pour qu'il puisse vous chiffrer des messages.



Bon ssh ;-)



__UPDATE : 03/02/2013__
------------------------
Pour Envoyer la Clef au serveur, il suffit de lancer la commande :
`$ssh-copy-id -i ~/.ssh/id_rsa.pub LOGIN@IPSERVEUR`
Enter ensuite le mot de passe de l'utilisateur pour lequel vous souhaitez ajouter la clef.
C'est tout !



__UPDATE : 22/02/2013__
------------------------
Sur Mac OSX cette commande n'existe pas, qu'a cela ne tienne, il suffit de créer le script `ssh-copy-id` dans `/usr/bin/` :

Pour créer le script il faut autoriser la connexion en _ROOT_ et lancer la commande :
    $su -c "nano /usr/bin/ssh-copy-id"
    #!/bin/sh
    ID_FILE="${HOME}/.ssh/id_rsa.pub"
    if [ "-i" = "$1" ]; then
      shift
      if [ -n "$2" ]; then
        if expr "$1" : ".*\.pub" > /dev/null ; then
          ID_FILE="$1"
        else
          ID_FILE="$1.pub"
        fi
        shift
      fi
    else
      if [ x$SSH_AUTH_SOCK != x ] ; then
        GET_ID="$GET_ID ssh-add -L"
      fi
    fi
    if [ -z "`eval $GET_ID`" ] && [ -r "${ID_FILE}" ] ; then
      GET_ID="cat ${ID_FILE}"
    fi
    if [ -z "`eval $GET_ID`" ]; then
      echo "$0: ERROR: No identities found" >&2
      exit 1
    fi
    if [ "$#" -lt 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
      echo "Usage: $0 [-i [identity_file]] [user@]machine" >&2
      exit 1
    fi
    { eval "$GET_ID" ; } | ssh $1 "umask 077; test -d .ssh || mkdir .ssh ; cat >> .ssh/authorized_keys" || exit 1
    cat <<EOF

Now try logging into the machine, with "ssh '$1'", and check in:
  .ssh/authorized_keys
to make sure we haven't added extra keys that you weren't expecting.
EOF`


Puis, modifier les droits du script :
`$su -c "chmod 755 /usr/bin/ssh-copy-id"`


Puis envoyer la Clef au serveur :
`$ssh-copy-id -i ~/.ssh/id_rsa.pub LOGIN@IPSERVEUR`
Enter ensuite le mot de passe de l'utilisateur pour lequel vous souhaitez ajouter la clef.
C'est tout !
